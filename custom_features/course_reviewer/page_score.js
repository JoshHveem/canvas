(async function () {
  await $.getScript("https://bridgetools.dev/canvas/custom_features/course_reviewer/scripts.js");
  const emoji = [
    // '&#128546',
    // '&#128528',
    // '&#128512;',
    'ðŸ¥‰',
    'ðŸ¥ˆ',
    'ðŸ¥‡'
  ]


  var courseData, pageReviewData, pageCriteria, courseReviewData, objectivesData, relatedPages, courseCode, year;
  async function refreshData() {
    let criteriaData = (await bridgetools.req(`https://reports.bridgetools.dev/api/reviews/criteria/type/Pages`));
    pageCriteria = {};
    for (let c in criteriaData) {
      let criterion = criteriaData[c];
      let name = criterionNameToVariable(criterion.name);
      pageCriteria[name] = criterion;
    }

    courseData  = (await canvasGet(`/api/v1/courses/${ENV.COURSE_ID}`))[0];
    let courseCodeYear = getCourseCodeYear(courseData);
    year = courseCodeYear.year;
    courseCode = courseCodeYear.courseCode;
    try {
      pageReviewData = await bridgetoolsReq(`https://reports.bridgetools.dev/api/reviews/courses/${ENV.COURSE_ID}/pages/${ENV.WIKI_PAGE.page_id}`);
      console.log(pageReviewData);
    } catch (err) {
      console.log(err);
      return false;
    }

    let objectivesQueryString = '';
    for (let o in pageReviewData.objectives) {
      if (o > 0) objectivesQueryString += '&';
      objectivesQueryString += 'objectives[]=' + pageReviewData.objectives[o];
    }
    try {
      relatedPages = await bridgetoolsReq(`https://reports.bridgetools.dev/api/reviews/courses/${ENV.COURSE_ID}/pages?${objectivesQueryString}`);
      console.log(relatedPages);
      for (let i in relatedPages) {
        let relatedPage = relatedPages[i];
        let relatedPageData = (await canvasGet(`/api/v1/courses/${relatedPage.course_id}/pages/${relatedPage.page_id}`))[0];
        relatedPage.canvas_data = relatedPageData;
      }
    } catch (err) {
      relatedPages = [];
      console.log(err);
    }

    try {
      objectivesData = await bridgetoolsReq(`https://reports.bridgetools.dev/api/reviews/courses/${courseCode}/year/${year}/objectives`);
    } catch (err) {
      objectivesData = [];
      console.log(err);
    }
    return true;
  }

  //reevaluate button
  let evaluateButton = $(`
    <a class="btn" id="btech-evaluate-button" rel="nofollow" >
      Run Evaluator 
    </a>
  `);
  //button is added after data refresh
  evaluateButton.click(async function() {
    detailedReportButton.hide();
    evaluateButton.hide();
    container.html('evaluating...');

    await evaluatePage(ENV.COURSE_ID, courseCode, year, ENV.WIKI_PAGE.page_id, ENV.WIKI_PAGE.body);
    if (await refreshData()) await generateContent(container);

    detailedReportButton.show();
    evaluateButton.show();
  });

  let detailedReportButton = $(`
    <a class="btn" id="btech-detailed-evaluation-button" rel="nofollow" >
      Detailed Report 
    </a>
  `);
  detailedReportButton.click(async function () {
    $("body").append(`
      <div class='btech-modal' style='display: inline-block;'>
        <!-- ERASE THE DISPLAY PIECE BEFORE GOING LIVE -->
        <div class='btech-modal-content' style='max-width: 800px;'>
          <div class='btech-modal-content-inner'></div>
        </div>
      </div>
    `);
    let modal = $('body .btech-modal');
    modal.on("click", function(event) {
      if ($(event.target).is(modal)) {
          modal.remove();
      }
    });
    let modalContent = $('body .btech-modal-content-inner');
    generateDetailedContent(modalContent);
  });

  // container for the evaluation itself
  let container = $('<div id="btech-course-reviewer-container"></div>');



  // do we have a review?
  async function generateDetailedContent(containerEl) {
    if (pageReviewData) {
      containerEl.append(generateRelevantObjectivesEl(objectivesData));
      containerEl.append(generateDetailedContentReviewEl('Page', pageCriteria, pageReviewData));
      containerEl.append(generateTopicTagsEl());
      // containerEl.append(generateRelatedPagesEl());
    }
  }

  function generatePageReviewEl() {
    let data = pageReviewData;
    let averageScore = calcPageScore(data);

    let el = $(`
      <div style="padding: 8px 0;">
        <div title="Average score for page review.">
          <h2>Page Quality</h2>
          <div style="text-align: center;">
            <span id="btech-course-reviewer-item-score" style="font-size: 2rem; cursor: pointer; user-select: none;">
              ${ data.ignore ? 'ðŸš«' : emoji?.[averageScore] ?? ''}
            </span>
          </div>
        </div>
        <div title="Additional feedback generated by the AI reviewer" style="margin-top: 0.5rem; display: inline-block;">
          <h2>AI Feedback</h2>
          <p>${data.feedback}</p>
        </div>
      </div> 
      `);
    let scoreIcon = $(el.find('#btech-course-reviewer-item-score'));
    scoreIcon.click(function () {
      data.ignore = !data.ignore;
      let el = $(this);
      el.html(data.ignore ? 'ðŸš«' : emoji?.[averageScore] ?? '');
      ignoreItem(ENV.COURSE_ID, 'pages', data.page_id, data.ignore)
    });
    return el;
  }

  async function generateContent(containerEl) {
    containerEl.empty();
    containerEl.append(generatePageReviewEl());
  }

  await refreshData();
  $("#right-side-wrapper").css("display", "block");
  $('aside#right-side').append(evaluateButton);
  $("aside#right-side").append(container);
  $('aside#right-side').append(detailedReportButton);
  if (pageReviewData?.page_id) await generateContent(container);
})();